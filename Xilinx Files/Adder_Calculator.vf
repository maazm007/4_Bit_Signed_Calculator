////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2013 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 14.7
//  \   \         Application : sch2hdl
//  /   /         Filename : Adder_Calculator.vf
// /___/   /\     Timestamp : 11/16/2022 18:32:29
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: sch2hdl -intstyle ise -family spartan6 -verilog E:/Projects/Xilinx/DigitalDesign_3rd_Year/Adder_Calculator.vf -w E:/Projects/Xilinx/DigitalDesign_3rd_Year/Adder_Calculator.sch
//Design Name: Adder_Calculator
//Device: spartan6
//Purpose:
//    This verilog netlist is translated from an ECS schematic.It can be 
//    synthesized and simulated, but it should not be modified. 
//
`timescale 1ns / 1ps

module Half_Adder_MUSER_Adder_Calculator(A, 
                                         B, 
                                         RST, 
                                         CARRY, 
                                         SUM);

    input A;
    input B;
    input RST;
   output CARRY;
   output SUM;
   
   wire XLXN_1;
   wire XLXN_2;
   
   XOR2  XLXI_1 (.I0(B), 
                .I1(A), 
                .O(XLXN_1));
   AND2  XLXI_3 (.I0(B), 
                .I1(A), 
                .O(XLXN_2));
   AND2  XLXI_4 (.I0(RST), 
                .I1(XLXN_1), 
                .O(SUM));
   AND2  XLXI_5 (.I0(RST), 
                .I1(XLXN_2), 
                .O(CARRY));
endmodule
`timescale 1ns / 1ps

module Full_Adder_MUSER_Adder_Calculator(A, 
                                         B, 
                                         Cin, 
                                         RST, 
                                         CARRY, 
                                         SUM);

    input A;
    input B;
    input Cin;
    input RST;
   output CARRY;
   output SUM;
   
   wire XLXN_1;
   wire XLXN_2;
   wire XLXN_3;
   
   Half_Adder_MUSER_Adder_Calculator  XLXI_1 (.A(A), 
                                             .B(B), 
                                             .RST(RST), 
                                             .CARRY(XLXN_3), 
                                             .SUM(XLXN_1));
   Half_Adder_MUSER_Adder_Calculator  XLXI_2 (.A(XLXN_1), 
                                             .B(Cin), 
                                             .RST(RST), 
                                             .CARRY(XLXN_2), 
                                             .SUM(SUM));
   OR2  XLXI_3 (.I0(XLXN_3), 
               .I1(XLXN_2), 
               .O(CARRY));
endmodule
`timescale 1ns / 1ps

module Eight_Bit_Adder_MUSER_Adder_Calculator(A, 
                                              B, 
                                              RESET, 
                                              SUM);

    input [7:0] A;
    input [7:0] B;
    input RESET;
   output [7:0] SUM;
   
   wire XLXN_2;
   wire XLXN_4;
   wire XLXN_6;
   wire XLXN_8;
   wire XLXN_10;
   wire XLXN_12;
   wire XLXN_14;
   
   Half_Adder_MUSER_Adder_Calculator  XLXI_1 (.A(A[0]), 
                                             .B(B[0]), 
                                             .RST(RESET), 
                                             .CARRY(XLXN_2), 
                                             .SUM(SUM[0]));
   Full_Adder_MUSER_Adder_Calculator  XLXI_2 (.A(A[1]), 
                                             .B(B[1]), 
                                             .Cin(XLXN_2), 
                                             .RST(RESET), 
                                             .CARRY(XLXN_4), 
                                             .SUM(SUM[1]));
   Full_Adder_MUSER_Adder_Calculator  XLXI_3 (.A(A[2]), 
                                             .B(B[2]), 
                                             .Cin(XLXN_4), 
                                             .RST(RESET), 
                                             .CARRY(XLXN_6), 
                                             .SUM(SUM[2]));
   Full_Adder_MUSER_Adder_Calculator  XLXI_4 (.A(A[3]), 
                                             .B(B[3]), 
                                             .Cin(XLXN_6), 
                                             .RST(RESET), 
                                             .CARRY(XLXN_10), 
                                             .SUM(SUM[3]));
   Full_Adder_MUSER_Adder_Calculator  XLXI_5 (.A(A[4]), 
                                             .B(B[4]), 
                                             .Cin(XLXN_10), 
                                             .RST(RESET), 
                                             .CARRY(XLXN_8), 
                                             .SUM(SUM[4]));
   Full_Adder_MUSER_Adder_Calculator  XLXI_6 (.A(A[5]), 
                                             .B(B[5]), 
                                             .Cin(XLXN_8), 
                                             .RST(RESET), 
                                             .CARRY(XLXN_12), 
                                             .SUM(SUM[5]));
   Full_Adder_MUSER_Adder_Calculator  XLXI_7 (.A(A[6]), 
                                             .B(B[6]), 
                                             .Cin(XLXN_12), 
                                             .RST(RESET), 
                                             .CARRY(XLXN_14), 
                                             .SUM(SUM[6]));
   Full_Adder_MUSER_Adder_Calculator  XLXI_8 (.A(A[7]), 
                                             .B(B[7]), 
                                             .Cin(XLXN_14), 
                                             .RST(RESET), 
                                             .CARRY(), 
                                             .SUM(SUM[7]));
endmodule
`timescale 1ns / 1ps

module Two_to_One_MUX_Eight_Bit_MUSER_Adder_Calculator(A, 
                                                       B, 
                                                       RESET, 
                                                       SEL, 
                                                       M_OUT);

    input [3:0] A;
    input [7:0] B;
    input RESET;
    input SEL;
   output [7:0] M_OUT;
   
   wire XLXN_17;
   wire XLXN_37;
   wire XLXN_38;
   wire XLXN_39;
   wire XLXN_40;
   wire XLXN_41;
   wire XLXN_42;
   wire XLXN_43;
   wire XLXN_44;
   wire XLXN_45;
   wire XLXN_46;
   wire XLXN_49;
   wire XLXN_50;
   wire XLXN_52;
   wire XLXN_53;
   wire XLXN_55;
   wire XLXN_56;
   wire XLXN_57;
   wire XLXN_58;
   wire XLXN_59;
   wire XLXN_60;
   wire XLXN_61;
   wire XLXN_62;
   wire XLXN_63;
   wire XLXN_65;
   wire XLXN_75;
   
   AND2  XLXI_6 (.I0(A[0]), 
                .I1(XLXN_17), 
                .O(XLXN_37));
   AND2  XLXI_7 (.I0(B[0]), 
                .I1(SEL), 
                .O(XLXN_38));
   AND2  XLXI_8 (.I0(A[1]), 
                .I1(XLXN_17), 
                .O(XLXN_39));
   AND2  XLXI_9 (.I0(B[1]), 
                .I1(SEL), 
                .O(XLXN_40));
   AND2  XLXI_10 (.I0(A[2]), 
                 .I1(XLXN_17), 
                 .O(XLXN_41));
   AND2  XLXI_11 (.I0(B[2]), 
                 .I1(SEL), 
                 .O(XLXN_42));
   AND2  XLXI_12 (.I0(A[3]), 
                 .I1(XLXN_17), 
                 .O(XLXN_43));
   AND2  XLXI_13 (.I0(B[3]), 
                 .I1(SEL), 
                 .O(XLXN_44));
   AND2  XLXI_14 (.I0(XLXN_75), 
                 .I1(XLXN_17), 
                 .O(XLXN_45));
   AND2  XLXI_15 (.I0(B[4]), 
                 .I1(SEL), 
                 .O(XLXN_46));
   AND2  XLXI_16 (.I0(XLXN_75), 
                 .I1(XLXN_17), 
                 .O(XLXN_49));
   AND2  XLXI_17 (.I0(B[5]), 
                 .I1(SEL), 
                 .O(XLXN_50));
   AND2  XLXI_18 (.I0(XLXN_75), 
                 .I1(XLXN_17), 
                 .O(XLXN_52));
   AND2  XLXI_19 (.I0(B[6]), 
                 .I1(SEL), 
                 .O(XLXN_53));
   AND2  XLXI_20 (.I0(XLXN_75), 
                 .I1(XLXN_17), 
                 .O(XLXN_55));
   AND2  XLXI_21 (.I0(B[7]), 
                 .I1(SEL), 
                 .O(XLXN_56));
   INV  XLXI_22 (.I(SEL), 
                .O(XLXN_17));
   OR2  XLXI_23 (.I0(XLXN_38), 
                .I1(XLXN_37), 
                .O(XLXN_57));
   OR2  XLXI_24 (.I0(XLXN_40), 
                .I1(XLXN_39), 
                .O(XLXN_58));
   OR2  XLXI_25 (.I0(XLXN_42), 
                .I1(XLXN_41), 
                .O(XLXN_59));
   OR2  XLXI_26 (.I0(XLXN_44), 
                .I1(XLXN_43), 
                .O(XLXN_60));
   OR2  XLXI_27 (.I0(XLXN_46), 
                .I1(XLXN_45), 
                .O(XLXN_61));
   OR2  XLXI_28 (.I0(XLXN_50), 
                .I1(XLXN_49), 
                .O(XLXN_63));
   OR2  XLXI_29 (.I0(XLXN_53), 
                .I1(XLXN_52), 
                .O(XLXN_62));
   OR2  XLXI_30 (.I0(XLXN_56), 
                .I1(XLXN_55), 
                .O(XLXN_65));
   AND2  XLXI_31 (.I0(RESET), 
                 .I1(XLXN_57), 
                 .O(M_OUT[0]));
   AND2  XLXI_33 (.I0(RESET), 
                 .I1(XLXN_58), 
                 .O(M_OUT[1]));
   AND2  XLXI_34 (.I0(RESET), 
                 .I1(XLXN_59), 
                 .O(M_OUT[2]));
   AND2  XLXI_35 (.I0(RESET), 
                 .I1(XLXN_60), 
                 .O(M_OUT[3]));
   AND2  XLXI_36 (.I0(RESET), 
                 .I1(XLXN_61), 
                 .O(M_OUT[4]));
   AND2  XLXI_37 (.I0(RESET), 
                 .I1(XLXN_63), 
                 .O(M_OUT[5]));
   AND2  XLXI_38 (.I0(RESET), 
                 .I1(XLXN_62), 
                 .O(M_OUT[6]));
   AND2  XLXI_39 (.I0(RESET), 
                 .I1(XLXN_65), 
                 .O(M_OUT[7]));
   GND  XLXI_40 (.G(XLXN_75));
endmodule
`timescale 1ns / 1ps

module Eight_Bit_Twos_Complement_MUSER_Adder_Calculator(A, 
                                                        RESET, 
                                                        OUTPUT);

    input [3:0] A;
    input RESET;
   output [7:0] OUTPUT;
   
   wire XLXN_1;
   wire XLXN_2;
   wire XLXN_3;
   wire XLXN_4;
   wire XLXN_5;
   wire XLXN_9;
   wire XLXN_20;
   wire XLXN_22;
   wire XLXN_24;
   wire XLXN_26;
   wire XLXN_28;
   wire XLXN_30;
   wire XLXN_32;
   wire XLXN_35;
   
   Half_Adder_MUSER_Adder_Calculator  XLXI_1 (.A(XLXN_2), 
                                             .B(XLXN_1), 
                                             .RST(RESET), 
                                             .CARRY(XLXN_20), 
                                             .SUM(OUTPUT[0]));
   Half_Adder_MUSER_Adder_Calculator  XLXI_2 (.A(XLXN_3), 
                                             .B(XLXN_20), 
                                             .RST(RESET), 
                                             .CARRY(XLXN_22), 
                                             .SUM(OUTPUT[1]));
   Half_Adder_MUSER_Adder_Calculator  XLXI_3 (.A(XLXN_4), 
                                             .B(XLXN_22), 
                                             .RST(RESET), 
                                             .CARRY(XLXN_24), 
                                             .SUM(OUTPUT[2]));
   Half_Adder_MUSER_Adder_Calculator  XLXI_4 (.A(XLXN_5), 
                                             .B(XLXN_24), 
                                             .RST(RESET), 
                                             .CARRY(XLXN_26), 
                                             .SUM(OUTPUT[3]));
   Half_Adder_MUSER_Adder_Calculator  XLXI_5 (.A(XLXN_9), 
                                             .B(XLXN_26), 
                                             .RST(RESET), 
                                             .CARRY(XLXN_28), 
                                             .SUM(OUTPUT[4]));
   Half_Adder_MUSER_Adder_Calculator  XLXI_6 (.A(XLXN_9), 
                                             .B(XLXN_28), 
                                             .RST(RESET), 
                                             .CARRY(XLXN_30), 
                                             .SUM(OUTPUT[5]));
   Half_Adder_MUSER_Adder_Calculator  XLXI_7 (.A(XLXN_9), 
                                             .B(XLXN_30), 
                                             .RST(RESET), 
                                             .CARRY(XLXN_32), 
                                             .SUM(OUTPUT[6]));
   Half_Adder_MUSER_Adder_Calculator  XLXI_8 (.A(XLXN_9), 
                                             .B(XLXN_32), 
                                             .RST(RESET), 
                                             .CARRY(), 
                                             .SUM(OUTPUT[7]));
   VCC  XLXI_9 (.P(XLXN_1));
   INV  XLXI_10 (.I(A[0]), 
                .O(XLXN_2));
   INV  XLXI_11 (.I(A[1]), 
                .O(XLXN_3));
   INV  XLXI_12 (.I(A[2]), 
                .O(XLXN_4));
   INV  XLXI_13 (.I(A[3]), 
                .O(XLXN_5));
   INV  XLXI_22 (.I(XLXN_35), 
                .O(XLXN_9));
   GND  XLXI_23 (.G(XLXN_35));
endmodule
`timescale 1ns / 1ps

module Adder_Calculator(A, 
                        B, 
                        RESET, 
                        S0, 
                        S1, 
                        SUM);

    input [3:0] A;
    input [3:0] B;
    input RESET;
    input S0;
    input S1;
   output [7:0] SUM;
   
   wire [7:0] XLXN_19;
   wire [7:0] XLXN_20;
   wire [7:0] XLXN_27;
   wire [7:0] XLXN_28;
   
   Eight_Bit_Twos_Complement_MUSER_Adder_Calculator  XLXI_21 (.A(A[3:0]), 
                                                             .RESET(RESET), 
                                                             
         .OUTPUT(XLXN_20[7:0]));
   Eight_Bit_Twos_Complement_MUSER_Adder_Calculator  XLXI_22 (.A(B[3:0]), 
                                                             .RESET(RESET), 
                                                             
         .OUTPUT(XLXN_19[7:0]));
   Two_to_One_MUX_Eight_Bit_MUSER_Adder_Calculator  XLXI_28 (.A(A[3:0]), 
                                                            .B(XLXN_20[7:0]), 
                                                            .RESET(RESET), 
                                                            .SEL(S1), 
                                                            
         .M_OUT(XLXN_27[7:0]));
   Two_to_One_MUX_Eight_Bit_MUSER_Adder_Calculator  XLXI_29 (.A(B[3:0]), 
                                                            .B(XLXN_19[7:0]), 
                                                            .RESET(RESET), 
                                                            .SEL(S0), 
                                                            
         .M_OUT(XLXN_28[7:0]));
   Eight_Bit_Adder_MUSER_Adder_Calculator  XLXI_30 (.A(XLXN_27[7:0]), 
                                                   .B(XLXN_28[7:0]), 
                                                   .RESET(RESET), 
                                                   .SUM(SUM[7:0]));
endmodule
